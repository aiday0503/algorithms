### Maximum Sum Subsequence Non-Adjacent

```
var arr = [5,5,10,100,10,5];
// 110 

function sum(arr){
  var inc = 0;
  var exc = 0;
  for (var i=0; i<arr.length;i++){
    var incNew = exc + arr[i];
    exc = Math.max(exc, inc);
    inc = incNew
  }
  return Math.max(exc,inc)
}
sum(arr)
```

improvement: no need to start from index 0;

```
function sum(arr){
  var inc = arr[1];
  var exc = arr[0];
  for (var i=2; i<arr.length;i++){
    var incNew = exc + arr[i];
    exc = Math.max(exc, inc);
    inc = incNew
  }
  return Math.max(exc,inc)
}
sum(arr)
```

### Bubble sort implementation in JavaScript

```
function bubbleSort(arr){
  for( var i = 0; i < arr.length; i++){
    for( var k = 0; k < arr.length; k++){
      if( arr[k] > arr[k + 1]) {
        var tmp = arr[k];
        arr[k] = arr[k + 1];
        arr[k + 1] = tmp;
      }
    }
  }
  return arr
}
```

improvement: flag avoids iteration if already sorted

```
function bubbleSort (arr) {
  for(var i = 0; i < arr.length; i++) {
    var flag = false;
    for(var k = 0; k < arr.length - i - 1; k++) {
      if(arr[k] > arr[k + 1]) {
        var tmp = arr[k];
        arr[k] = arr[k + 1];
        arr[k + 1] = tmp;
        flag = true;
      }
    }
    if(!flag) {
      break;
    }
  }
  return arr
}
```

Complexity of Bubble Sort is **O(n2)**

Space complexity for Bubble Sort is **O(1)**

Advantage:
* simplicity
